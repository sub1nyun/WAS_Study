Ip (공인 ip)와 사설Ip

공인 -> 유일한 ip -> 공유기가 들고 있는 공인 ip -> 외부에서는 여기까지는 엑세스(접근)
사설 -> 공유기밑으로 있는 pc들 -> 사설ip(내부ip)

마을에 pc가 3대 있는데 공인 ip 2개를 공유하면 모두 사용이 가능

10.1.5.7 -> a,b
10.1.5.7 -> c

ex) 100 가구가 있다면 -> 80개 정도 있으면 돌려가면서 사용이 가능함
-> 내 ip가 고정이 될 수 없는 문제가 발생함
-> ip가 고정되지 못하면 -> 서버 운영이 불가능함

- DHCP 할당 -> 남는 ip를 부여해준다 -> 부족하다면 다른 ip로 변경 부여 -> ip가 지속적으로 변함 -> 유동 ip
-> 서버 운영이 불가능함!
=> 서버 운영을 하기 위해서는?

-> 고정ip가 필요함 -> 비용이 비쌈 

프리티어 -> 유동ip 제공
=> 고정 ip로 변경하면 됨(무료)
-> aws에서는 고정 ip를 부여 받는 것 (무료)
-> 언제 유료가 되는가? -> 고정 ip로 ec2 연결을 안 하고 부여만 받으면 -> 유료로 변경됨
-> 반대로 연결을 한다면 무료


1. 환경변수

$HOME -> 리눅스 환경에서 변수를 찾을때 사용하는 기호
- export LOVE="i love you" LOVE라는 환경변수를 등록하는 것
-> 단점으로 터미널을 재부팅 시 변수가 사라짐
-> 어떻게 하면 환경변수가 등록이 가능할까?

home의 위치에서 ll 찾아보면
- .bashrc 라는 파일이 존재함 -> 환경파일 등을 저장하는 리눅스의 설정 파일 -> 재부팅시에 적용됨
-> 재부팅하지 않고 적용하고 싶다면?
=> source ~ 명령어를 사용해서 바로 적용이 가능함

2. bashrc

export LOVE="i love you"
로그인시에만 적용
- source ./bashrc  -> 바로 적용

3. 환경변수 적용 범위
- .bashrc -> 어디에서나 사용이 가능
- 터미널에서 만들고 source 적용 -> 터미널이 종료되기 직전까지 사용이 가능함
- 쉘 스크립트(파일)로 변수를 만들고 다른 파일에서 실행하기 위해서는 
1. ./bashrc로 등록 (광역적으로 설정)
2. source로 터미널에서 적용 (터미널이 꺼지면 사용불가)
-> deploy.sh 파일이 실행되는 동안에만 변수를 사용할 수 있으면 됨
**** 파일에 source 라는 코드를 작성해주면 됨.

3. 서버 PID 찾아서 종료시키기

aws-v2-0,0.1.jar (형태로 실행파일이 만들어짐)

실행 -> aws-v2-0.0.1.jar 이름으로 실행됨

pgrep -f aws-v2-0.0.1.jar 실행 결과
/home/ubuntu/aws-v2/build/libs/aws-v2-0.0.1.jar

5. 프로젝트 폴더 삭제

rm -rf /home/ubuntu/aws-v2

6. 프로파일 엑티브 설정
java -jar -Dspring.profiles.active=prod 해당 파일 실행

7. 테스트 없이 jar 빌드하고 싶을때
./gradlew build -x test 


재배포 스크립트 파일 작성 예시

#!/bin/bash
-- 환경변수 호출
#1. env variable - 외부 환경 변수
source ./var.sh
echo "1. env variable setting complete"
-- 크론 제거
# 2. clone delete
touch crontab_delete
crontab crontab_delete
rm crontab_delete
echo "2. cron delete complete"
-- 서버 실행중인지 체크
# 3. server checking
if [ -n "${PROJECT_PID}" ]; then ---> -n 문자열이 0이 아니라면 ---> 서버가 켜져있다는 것
  # re deploy
 kill -9 $PROJECT_PID
 echo "3. project kill complete"
else
 # first deploy
 
# 3-1 apt update
sudo apt-get -y update 1>/dev/null   ----> -y 옵션을 통해서 설치 스크립트 묻지 않기 / 1>/dev/null -> 로그 휴지통으로 버리기
echo "3-1 apt-get update complete"

# 3-2 jdk install
sudo apt-get -y install openjdk-11-jdk 1</dev/null
echo "3-2 jdk install complete"

# 3-3 timezone
sudo timedatectl set-timezone Asia/Seoul
echo "3-3 timezone setting compete"
fi -> if 문 스크립트 마무리
-- 프로젝트 폴더 제거
# 4. project foler delete
rm -rf ${HOME}/${PROJECT_NAME}
echo "4. project folder delete complete"
-- 프로젝트 제 설치
# 5. git clone
git clone https://github.com/${GITHUB_ID}/$P{PROJECT_NAME}.git
sleep 3s
echo "4. git clone complete"
-- 실행 조건 추가
# 6. gradlew +x
chmod u+x ${HOME}/${PROJECT_NAME}/gradlew
-- 빌드
# 7. build
cd ${HOME}/${PROJECT_NAME}
./gradlew build
echo "7. gradlew build complete"
-- 백그라운드 실행
# 8. start jar
nohup java -jar -Dspring.profiles.active=prod ${JAR_PATH} 1>${HOME/}log.out 2>${HOME}/err.out &

# 9. cron registration
touch crontab_new
echo "* * * * * ${HOME}/check-and-restart.sh"  1>crontab_new      ----> 1분마다 서버 동작을 확인하는 스크립트
# register the others.... you use (crontab에 다른걸 추가 하고싶다면) >> (append 하기)
crontab crontab_new
rm crontab_new
echo "9. cron registration complete"
----> check-and-restart.sh 파일 생성해야함

vi check-and-restart.sh

#!/bin/bash

source ./var.sh  ----> import와 유사한 개념

if [ -z "$PROJECT_PID" ]; then -----> 문자열이 0이면 참 -> 즉 서버가 실행되고 있지 않다면
 nohup java -jar -Dspring.profiles.active=prod ${JAR_PATH} 1>${HOME}/log.out 2>${HOME}/.
fi
---- > 생성 후 실행 권한을 줘야함

8. tar 압축
 -c tar로 압출을 할 때
 -v 압축을 하거나 풀때 출력을 화면에 보여줄지 말지
 -f 파일 이름을 지정할 수 있음
 -x tar로 압출을 풀때

- tar -cvf hello.tar a.txt b.txt -> a와 b 파일을 -> hello.tar로 압축
-> tar -cvf hello.tar 파일명 파일명

- tar -xvf hello.tar
-> tar -xvf hello.tar  -> hello.tar 파일 압축을 푼다는 것
# -v 옵션은 생략이 가능함 -> 화면에 표현하는 것이기 때문에 -> 보이는 것이 좋기 때문에 -v는 기본 옵션처럼 사용함

ex) tar -cvf deploy.tar check-and-restart.sh deploy.sh var.sh 
---> deploy.tar를 로컬 폴더로 이동시키기
1. 세션을 새로 열어서 (SFTP 세션)
- host 주소 및 Username : ubuntu 입력 후 - pirvate key 사용 
- FTP 모드로 접속
2. 만들어낸 tar 파일을 원하는 폴더로 이동 -> 드래그만 하면 됨






