git 에서 프로젝트를 다운받아서 EC2 서버에 배포 시작

# aws 에서 인스턴스 생성 및 탄력 IP를 받아 인스턴스와 연결 후 시작하였음
# 리눅스 환경에서 실제 프로세스가 작동중이지 않다면 750시간 즉, 사용시간 요금이 부과되지 않음 -> 서버를 종료할 것

#### 진행 사항
1. 자바 설치 (JDK) 
- sudo apt update
- sudo aptt install openjdk-11-jdk -> 너무 많음으로 -> sudo apt-cache search jdk | grep openjdk-11

2. github 다운받기
- git clone https://github.com/codingspecialist/aws-v1.git

3. gradlew 실행권한 주기
- cd ~/aws-v1 =====> cd ~ 경우는 홈으로 이동함
- chmod u+x gradlew -> 실행권한 추가

4. gradlew로 프로젝트를 .jar 파일로 변경하기
- ./gradlew build ======> ./ 를 통해서 현재 경로를 지정해주지 않으면 환경변수 즉 전체에서 찾기 때문에 안 됨

5. java로 .jar 파일을 실행  -> 사용하지 않음
- cd build/libs ----- > 이동
- java -jar *.jar -----> jar 파일이 하나라면 치환이 가능함, 여러가지가 있다면 파일명 입력 후 .jar 

6. nohup 으로 실행
- nohup java -jar 파일명 1>log.out 2>err.out &

7. 시간 변경 -----> 타임존 변경(재실행)
- timedatectl 명령어
- timedatectl list-timezones ----> 지정이 가능한 지역  ---> timedatectl list-timezones | grep Seoul (S를 대문자로 해야함)
- sudo timedatectl set-timezone Asia/Seoul ----> 아시아의 서울로 설정

8. pid 찾기 (프로세스 아이디)
- ps -ef | grep *.jar | grep -v grep | awk '{print $2}'
# 간편한 방법 -----> pgrep
pgrep -f *.jar ------> f 옵션은 프로세스의 풀네임 

----- 스크립트 파일 짜보기 -> spring-stop.sh -> 실행권한을 줬음 -> .sh 스크립트 파일
echo "Springboot Stop....."   ---> 오른쪽 내용을 출력하라는 명령어 echo
SPRING_PID=$(pgrep -f v1-0.0.1-SNAPSHOT.jar)  ----> $(명령어) =====> 명령어의 결과를 리턴 --> 대입할때 주로 사용
echo $SPRING_PID ------> $변수 ====> 변수의 값을 출력 혹은 실행
kill -9 $SPRING_PID
-------------
- 실행  --> ./spring-stop.sh

9. cron 개념과 실습 -> 주기적 실행 명령어 -> crontab
- * * * * ls -l 1>>cron.log ===> 표준출력 1은 생략이 가능함 ====> '>' 한 개 일때는 결과를 옮기고 덮어씌움 ====> '>>' 두 개 일때는 그 밑에 추가(어팬드)
- * * * * * 각각 뜻하는 의미 -> 매일 매분
- 분(0-59) ex) 1 (매 1분마다)
- 시간(0-23) ex) 3,4 (새벽 3시와 4시) 3-6 (새벽 3시에서 6시 사이)
- 일(1-31)
- 월(1-12)
- 요일(0-7)

job.sh --> ls -l을 -> cron.log에 덮어씀


1. crontab -e -> 정기적 실행 ---> 직접 등록하지 않고 스크립트를 사용하여 등록하기
--- myScript.sh를 실행하면 ====> 
2. crontab -l 1>crontab_new ---> 내용을 crontab_new로 옮김
3. crontab_new 가장 하단에 * * * * * job.sh (echo로 등록)   ------> crontab_new를 통해 crontab에 등록 완료 후 -> rm crontab_new를 통해 삭제
4. crontab -e에 * * * * * job.sh가 추가 등록 됨

----- tip 
# 프로젝트의 build.gradle에서 jar { enabled = false } 를 작성해야 *.plain.jar 파일이 생성되지 않음
-> plain.jar란 -> 모든 의존성 라이브러리를 포함하지 않고 작성된 소스코드의 클래스 파일과 리소스 파일만 포함하게 됨
-> .jar 파일이 두개가 생김

nohup 명령어는 -> 리눅스에서 프로세스를 실행한 터미널의 세션이 끊어지더라도 지속적으로 동작 할 수 있게 해주는 명령어

우리가 포그라운드로 실행했기 때문 -> 포그라운드란 -> 화면에 보이는 것들을 의미함
=> nohup으로 했다고 하더라도 터미널 종료시에 함께 종료되버림 -> 백그라운드로 실행해야함 &
-> nohup java -jar *.jar & --> 백그라운드로 실행했기 때문에 로그를 볼 수 없게됨
-> nohup은 자동으로 log를 남김 -> nohup.out 파일 -> tail -f 통해서 볼 수 있음
-> nohub.out 파일을 다른 파일로 옮겨서 출력하기
- nohup java -jar *.jar > mylog.out & ====> >를 사용하여 입출력 변경 및 & 백그라운드 실행


------ 표준 출력
1. 에러 출력 - 2 -> nohup.out
2. 표준 출력 - 1 -> nohup.out 
=> 모두 nohup.out으로 하기 때문에 나누려고 함

- nohup java -jar 파일명 1 > log.out 2 > err.out & -> 출력에 종류에 따라서 리다이렉션 -> 표준 출력은 log.out에 에러 출력은 err.out에 출력한다는 것
=> 이유 : 배포를 위해서 작성했던 모든 명령어들 -> 스크립트로 작성 ---> 자동화 예정







