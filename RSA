K(key 개념 - 공유하는 열쇠)

대칭키를 사용하면 (열때, 잠글때) 교환이 어렵다는 단점이 존재함

# RSA
키를 2개로 나눔
공개키, 개인키
- 동일한 키로 작업을 한다면 키를 전달하는 과정에서 뺏기거나 위조가 될 수 있는 문제가 존재함
- 공개키 : 모두에게 공개됨
- 개인키 : 자기 자신만 열 수 있는 개인키로
공개키로 잠그면 개인키로 열 수 있고
개인키로 잠그면 공개키로 열 수 있음

1. 송신자는 수신자의 공개키로 데이터를 전송 -> 수신자 외에는 수신자의 개인키가 없기에 데이터를 볼 수 없음
# 문제점 : 중간에 누군가 데이터를 탈취 후 위조해서 보낼 수 있음 -> 무결성 성립 x
2. 한번더 송신자의 개인키로 데이터를 감싸줌 -> 탈취해도 다시 송신자의 개인키로 감쌀 수 없음 
-> 탈취자 본인의 개인키로 감싸서 보내게 됨  -> 무결성이 지켜짐

# HTTPS처럼 끝에 s가 붙은 건 RSA가 사용된 방식으로 무결성을 보장한다

프로토콜 
1. 데이터 전송 방법
 - 데이터를 수신자의 '공개키'로 잠금 -> 암호화
 - 잠긴 데이터를 다시 송신자의 '비밀키'로 잠금 -> 전자서명
 - 데이터 전송

2. 데이터 받기
 - 데이터를 송신자의 '공개키'로 열기 -> 서명 검증
 - 잠금이 열린다면 수신자의 '개인키'로 열기 -> 복호화
 
 외부에서 접속이 완료가 되어야 통신이 가능함 -> 아무에게나 보여주기 x
 리눅스 명령어를 사용하여
 ls -al -> .ssh (숨김파일) -> authorized_keys (공개키)
 
 사용자 - 접속(22포트, 비밀키) - 22의 컴퓨터 
